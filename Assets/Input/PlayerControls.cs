//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Movement Map"",
            ""id"": ""e8e6dc96-49c2-4ae5-a934-b32b1ab30266"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""08156bbd-f865-46d9-a701-876b3b90eb9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraOld"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7d682bb-c3fa-44d7-b59f-e437e31633bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d21221f0-7158-44f0-aa9b-bc27966912e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d81fb7d9-6088-42cd-8b18-a44ae065e711"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52f40d1c-d4da-4be8-912a-544fb1866f19"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0ddf144a-b18d-4de5-ae9a-3096647ac79e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e0593f6-32e1-451d-a0e2-8dc7677fdfaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0add883b-6d18-4582-afd3-ecc23a41df3a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0aff3647-a10a-431c-beeb-56fa997ddb9f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""CameraOld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6971b86c-2a28-489b-891e-633c0be5669a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""CameraOld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dedfef4f-fa2a-4284-8e1e-ee0dccb0081b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Actions Map"",
            ""id"": ""dc31a676-30e5-4a19-a455-80ad65634869"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""c0c07c41-6bbf-4f7b-bb51-5f60e8b4a7b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""387a723a-e807-47f6-9e27-10de28111b14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RBHold"",
                    ""type"": ""Button"",
                    ""id"": ""a0e68676-b578-4ace-b305-a2aa7438f4f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""9c2aff3d-9f51-4e54-aa27-88cf21e9923d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""aacbcd81-00d1-47d0-968e-2d999b9b159f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c1a8e5fb-bb6a-48dc-854b-760c951aa829"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""5ad44cc8-1ce6-411b-8a08-401f782b20ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""2H"",
                    ""type"": ""Button"",
                    ""id"": ""cb82206a-f9ad-4745-b8f1-a5538168cafd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d9ebf72-421a-42d0-9ded-0ae1224d5bf3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4aff379-7ecb-49e1-b917-b79bf56b8314"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e20cee9-643b-4b4d-97c0-a04d8fca8809"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d52f938-5136-4349-aee2-46d2af1c4f4f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73f7326c-5139-4a92-9a5a-92f9e89046fc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa19c35a-0893-4d40-8059-ca9f36ad88ad"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bc4234e-5768-4731-ac61-46d1c8dccae6"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""2H"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f5b62d5-f369-48d9-b313-8047b45595f4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RBHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Quick Slots Map"",
            ""id"": ""0571849d-035f-4750-8d33-42cc9b315145"",
            ""actions"": [
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""2c8f1460-729a-4bcc-affc-4a7c3feea0b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""2c35a1ae-f911-4360-9194-84dad023aa5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""a2205ae9-a946-4616-b54b-fe4932c038a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""475df636-b2b0-4ec9-8638-c3e395d98f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ad27a0a-37ce-4e83-834d-fc4c747f8457"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf733f5d-8447-4072-88ce-0b023c085b70"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3b6e850-401d-4928-ab72-61e32ec8df68"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebf99796-e93e-4817-8a48-456951407e79"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement Map
        m_PlayerMovementMap = asset.FindActionMap("Player Movement Map", throwIfNotFound: true);
        m_PlayerMovementMap_Movement = m_PlayerMovementMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovementMap_CameraOld = m_PlayerMovementMap.FindAction("CameraOld", throwIfNotFound: true);
        m_PlayerMovementMap_Look = m_PlayerMovementMap.FindAction("Look", throwIfNotFound: true);
        // Player Actions Map
        m_PlayerActionsMap = asset.FindActionMap("Player Actions Map", throwIfNotFound: true);
        m_PlayerActionsMap_Roll = m_PlayerActionsMap.FindAction("Roll", throwIfNotFound: true);
        m_PlayerActionsMap_RB = m_PlayerActionsMap.FindAction("RB", throwIfNotFound: true);
        m_PlayerActionsMap_RBHold = m_PlayerActionsMap.FindAction("RBHold", throwIfNotFound: true);
        m_PlayerActionsMap_RT = m_PlayerActionsMap.FindAction("RT", throwIfNotFound: true);
        m_PlayerActionsMap_Interact = m_PlayerActionsMap.FindAction("Interact", throwIfNotFound: true);
        m_PlayerActionsMap_Jump = m_PlayerActionsMap.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActionsMap_Inventory = m_PlayerActionsMap.FindAction("Inventory", throwIfNotFound: true);
        m_PlayerActionsMap__2H = m_PlayerActionsMap.FindAction("2H", throwIfNotFound: true);
        // Player Quick Slots Map
        m_PlayerQuickSlotsMap = asset.FindActionMap("Player Quick Slots Map", throwIfNotFound: true);
        m_PlayerQuickSlotsMap_UpArrow = m_PlayerQuickSlotsMap.FindAction("UpArrow", throwIfNotFound: true);
        m_PlayerQuickSlotsMap_DownArrow = m_PlayerQuickSlotsMap.FindAction("DownArrow", throwIfNotFound: true);
        m_PlayerQuickSlotsMap_LeftArrow = m_PlayerQuickSlotsMap.FindAction("LeftArrow", throwIfNotFound: true);
        m_PlayerQuickSlotsMap_RightArrow = m_PlayerQuickSlotsMap.FindAction("RightArrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement Map
    private readonly InputActionMap m_PlayerMovementMap;
    private List<IPlayerMovementMapActions> m_PlayerMovementMapActionsCallbackInterfaces = new List<IPlayerMovementMapActions>();
    private readonly InputAction m_PlayerMovementMap_Movement;
    private readonly InputAction m_PlayerMovementMap_CameraOld;
    private readonly InputAction m_PlayerMovementMap_Look;
    public struct PlayerMovementMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovementMap_Movement;
        public InputAction @CameraOld => m_Wrapper.m_PlayerMovementMap_CameraOld;
        public InputAction @Look => m_Wrapper.m_PlayerMovementMap_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @CameraOld.started += instance.OnCameraOld;
            @CameraOld.performed += instance.OnCameraOld;
            @CameraOld.canceled += instance.OnCameraOld;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IPlayerMovementMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @CameraOld.started -= instance.OnCameraOld;
            @CameraOld.performed -= instance.OnCameraOld;
            @CameraOld.canceled -= instance.OnCameraOld;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IPlayerMovementMapActions instance)
        {
            if (m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementMapActions @PlayerMovementMap => new PlayerMovementMapActions(this);

    // Player Actions Map
    private readonly InputActionMap m_PlayerActionsMap;
    private List<IPlayerActionsMapActions> m_PlayerActionsMapActionsCallbackInterfaces = new List<IPlayerActionsMapActions>();
    private readonly InputAction m_PlayerActionsMap_Roll;
    private readonly InputAction m_PlayerActionsMap_RB;
    private readonly InputAction m_PlayerActionsMap_RBHold;
    private readonly InputAction m_PlayerActionsMap_RT;
    private readonly InputAction m_PlayerActionsMap_Interact;
    private readonly InputAction m_PlayerActionsMap_Jump;
    private readonly InputAction m_PlayerActionsMap_Inventory;
    private readonly InputAction m_PlayerActionsMap__2H;
    public struct PlayerActionsMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_PlayerActionsMap_Roll;
        public InputAction @RB => m_Wrapper.m_PlayerActionsMap_RB;
        public InputAction @RBHold => m_Wrapper.m_PlayerActionsMap_RBHold;
        public InputAction @RT => m_Wrapper.m_PlayerActionsMap_RT;
        public InputAction @Interact => m_Wrapper.m_PlayerActionsMap_Interact;
        public InputAction @Jump => m_Wrapper.m_PlayerActionsMap_Jump;
        public InputAction @Inventory => m_Wrapper.m_PlayerActionsMap_Inventory;
        public InputAction @_2H => m_Wrapper.m_PlayerActionsMap__2H;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsMapActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
            @RBHold.started += instance.OnRBHold;
            @RBHold.performed += instance.OnRBHold;
            @RBHold.canceled += instance.OnRBHold;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @_2H.started += instance.On_2H;
            @_2H.performed += instance.On_2H;
            @_2H.canceled += instance.On_2H;
        }

        private void UnregisterCallbacks(IPlayerActionsMapActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
            @RBHold.started -= instance.OnRBHold;
            @RBHold.performed -= instance.OnRBHold;
            @RBHold.canceled -= instance.OnRBHold;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @_2H.started -= instance.On_2H;
            @_2H.performed -= instance.On_2H;
            @_2H.canceled -= instance.On_2H;
        }

        public void RemoveCallbacks(IPlayerActionsMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsMapActions @PlayerActionsMap => new PlayerActionsMapActions(this);

    // Player Quick Slots Map
    private readonly InputActionMap m_PlayerQuickSlotsMap;
    private List<IPlayerQuickSlotsMapActions> m_PlayerQuickSlotsMapActionsCallbackInterfaces = new List<IPlayerQuickSlotsMapActions>();
    private readonly InputAction m_PlayerQuickSlotsMap_UpArrow;
    private readonly InputAction m_PlayerQuickSlotsMap_DownArrow;
    private readonly InputAction m_PlayerQuickSlotsMap_LeftArrow;
    private readonly InputAction m_PlayerQuickSlotsMap_RightArrow;
    public struct PlayerQuickSlotsMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotsMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpArrow => m_Wrapper.m_PlayerQuickSlotsMap_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_PlayerQuickSlotsMap_DownArrow;
        public InputAction @LeftArrow => m_Wrapper.m_PlayerQuickSlotsMap_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_PlayerQuickSlotsMap_RightArrow;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlotsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerQuickSlotsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerQuickSlotsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerQuickSlotsMapActionsCallbackInterfaces.Add(instance);
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
        }

        private void UnregisterCallbacks(IPlayerQuickSlotsMapActions instance)
        {
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
        }

        public void RemoveCallbacks(IPlayerQuickSlotsMapActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerQuickSlotsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerQuickSlotsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerQuickSlotsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerQuickSlotsMapActions @PlayerQuickSlotsMap => new PlayerQuickSlotsMapActions(this);
    public interface IPlayerMovementMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCameraOld(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsMapActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnRBHold(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void On_2H(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsMapActions
    {
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
    }
}
